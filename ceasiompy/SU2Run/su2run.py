"""
CEASIOMpy: Conceptual Aircraft Design Software

Developed by CFS ENGINEERING, 1015 Lausanne, Switzerland

Module to run SU2 Calculation in CEASIOMpy

Python version: >=3.7

| Author : Aidan Jungo
| Creation: 2018-11-06

TODO:

    * Add possibility of using SSH
    * Create test functions
    * complete input/output in __specs__
    * Check platform with-> sys.platform
    * Move run_SU2_fsi to /SU2Run/func/su2fsi.py

"""

# =================================================================================================
#   IMPORTS
# =================================================================================================

import os
import sys

from cpacspy.cpacsfunctions import get_value_or_default, open_tixi

from ceasiompy.utils.ceasiompyutils import get_results_directory, run_soft
import ceasiompy.utils.moduleinterfaces as mi

from ceasiompy.SU2Run.func.su2config import generate_su2_cfd_config
from ceasiompy.SU2Run.func.extractloads import extract_loads
from ceasiompy.SU2Run.func.su2results import get_su2_results
from ceasiompy.utils.configfiles import ConfigFile
from ceasiompy.utils.xpath import SU2_XPATH

from ceasiompy.utils.ceasiomlogger import get_logger

log = get_logger(__file__.split(".")[0])

MODULE_DIR = os.path.dirname(os.path.abspath(__file__))
MODULE_NAME = os.path.basename(os.getcwd())

# =================================================================================================
#   CLASSES
# =================================================================================================


# =================================================================================================
#   FUNCTIONS
# =================================================================================================


def run_SU2_single(config_path, wkdir, nb_proc):
    """Function to run a single SU2 calculation.

    Function 'run_SU2_single' will run in the given working directory a SU2
    calculation (SU2_CFD then SU2_SOL) with the given config_path.

    Args:
        config_path (str): Path to the configuration file
        wkdir (str): Path to the working directory

    """

    if not os.path.exists(wkdir):
        raise OSError("The working directory : " + wkdir + "does not exit!")

    run_soft("SU2_CFD", config_path, wkdir, nb_proc)
    run_soft("SU2_SOL", config_path, wkdir, nb_proc)


def run_SU2_multi(wkdir, nb_proc):
    """Function to run a multiple SU2 calculation.

    Function 'run_SU2_multi' will run in the given working directory SU2
    calculations (SU2_CFD then SU2_SOL). The working directory must have a
    folder structure created by 'SU2Config' module.

    Args:
        wkdir (str): Path to the working directory

    """

    if not os.path.exists(wkdir):
        raise OSError("The working directory : " + wkdir + "does not exit!")

    # Check if there is some case directory
    case_dir_list = [dir for dir in os.listdir(wkdir) if "Case" in dir]
    if case_dir_list == []:
        raise OSError("No folder has been found in the working directory: " + wkdir)

    for dir in sorted(case_dir_list):
        config_dir = os.path.join(wkdir, dir)

        find_config_cfd = False

        for file in os.listdir(config_dir):
            if file == "ConfigCFD.cfg":
                if find_config_cfd:
                    raise ValueError('More than one "ConfigCFD.cfg" file in this directory!')
                config_cfd_path = os.path.join(config_dir, file)
                find_config_cfd = True

        if not find_config_cfd:
            raise ValueError('No "ConfigCFD.cfg" file has been found in this directory!')

        run_soft("SU2_CFD", config_cfd_path, config_dir, nb_proc)

        # run_soft('SU2_SOL',config_file_path,config_dir,nb_proc)
        # Only useful if you need surface/volume flow file,
        # if not forces_breakdown.dat will be generated by SU2_CFD.


# TODO: The deformation part should be moved to SU2MeshDef module
def run_SU2_fsi(config_path, wkdir, nb_proc):
    """Function to run a SU2 calculation for FSI .

    Function 'run_SU2_fsi' deforms an element of the mesh (e.g. wing) from
    point file 'disp.dat' given by a structural model and then runs a SU2
    calculation (SU2_CFD then SU2_SOL) with the given config_path. Finally a
    load file is saved, to be send to the structural model.

    Args:
        config_path (str): Path to the configuration file
        wkdir (str): Path to the working directory

    """

    if not os.path.exists(wkdir):
        raise OSError("The working directory : " + wkdir + "does not exit!")

    # Modify config file for SU2_DEF
    config_def_path = os.path.join(wkdir, "ConfigDEF.cfg")
    cfg_def = ConfigFile(config_path)

    cfg_def["DV_KIND"] = "SURFACE_FILE"
    cfg_def["DV_MARKER"] = "Wing"
    cfg_def["DV_FILENAME"] = "disp.dat"  # TODO: Should be a constant or find in CPACS ?
    # TODO: Do we need that? if yes, find 'WING' in CPACS
    cfg_def["DV_PARAM"] = ["WING", "0", "0", "1", "0.0", "0.0", "1.0"]
    cfg_def["DV_VALUE"] = 0.01
    cfg_def.write_file(config_def_path, overwrite=True)

    # Modify config file for SU2_CFD
    config_cfd_path = os.path.join(wkdir, "ConfigCFD.cfg")
    cfg_cfd = ConfigFile(config_path)
    cfg_cfd["MESH_FILENAME"] = "mesh_out.su2"
    cfg_cfd.write_file(config_cfd_path, overwrite=True)

    run_soft("SU2_DEF", config_def_path, wkdir, nb_proc)
    run_soft("SU2_CFD", config_cfd_path, wkdir, nb_proc)
    run_soft("SU2_SOL", config_cfd_path, wkdir, nb_proc)

    extract_loads(wkdir)


# =================================================================================================
#    MAIN
# =================================================================================================


def main(cpacs_path, cpacs_out_path):

    log.info("----- Start of " + os.path.basename(__file__) + " -----")

    # Get number of proc to use
    tixi = open_tixi(cpacs_path)
    nb_proc = get_value_or_default(tixi, SU2_XPATH + "/settings/nbProc", 1)

    # Get results directory
    results_dir = get_results_directory("SU2Run")

    # Temporary CPACS to be stored after "generate_su2_cfd_config"
    cpacs_tmp_cfg = os.path.join(os.path.dirname(cpacs_out_path), "ConfigTMP.xml")

    # Execute SU2 functions
    generate_su2_cfd_config(cpacs_path, cpacs_tmp_cfg, results_dir)
    run_SU2_multi(results_dir, nb_proc)
    get_su2_results(cpacs_tmp_cfg, cpacs_out_path, results_dir)

    log.info("----- End of " + os.path.basename(__file__) + " -----")


if __name__ == "__main__":

    cpacs_path = mi.get_toolinput_file_path(MODULE_NAME)
    cpacs_out_path = mi.get_tooloutput_file_path(MODULE_NAME)

    main(cpacs_path, cpacs_out_path)
