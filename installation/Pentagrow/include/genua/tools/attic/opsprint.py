#! /usr/bin/python
# print vector operators

binops = ['+','-','*','/'];
mfuns = ['sin','cos','tan','asin','acos','atan','exp','log','sqrt','ceil','floor','sinh','cosh','tanh','fabs','log10'];
lens = [2,3,4,6];
typname = "DMatrix<NumType>";
scalar = "NumType";
tparg = "template <class NumType>";

def binoploop(s):
  """ binary operator loops """

  # vector-vector operations
  if s != '*' and s != '/':
    print tparg
    print 'inline '+typname+' operator'+s+' (const '+typname+' & a, const '+typname+' & b)'
    print '{';
    print '  assert(a.size() == b.size());';
    print '  '+typname+' c(a);';
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    c[i] '+s+'= b[i];'
    print '  return c;'
    print '}'
    print

    # computed assignment
    print tparg
    print 'inline '+typname+' & operator'+s+'= ('+typname+' & a, const '+typname+' & b)'
    print '{';
    print '  assert(a.size() == b.size());';
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    a[i] '+s+'= b[i];'
    print '  return a;'
    print '}'
    print

  # vector-scalar operations
  if s == '/':
    print tparg
    print 'inline '+typname+' operator'+s+' (const '+typname+' & a, '+scalar+' b)'
    print '{';
    print '  '+typname+' c(a);';
    print '  '+scalar+' ib(1.0/b);'
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    c[i] *= ib;'
    print '  return c;'
    print '}'
    print

    # computed assignment
    print tparg
    print 'inline '+typname+' & operator'+s+'= ('+typname+' & a, '+scalar+' b)'
    print '{';
    print '  '+scalar+' ib(1.0/b);'
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    a[i] *= ib;'
    print '  return a;'
    print '}'
    print

  else:
    print tparg
    print 'inline '+typname+' operator'+s+' (const '+typname+' & a, '+scalar+' b)'
    print '{';
    print '  '+typname+' c(a);';
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    c[i] '+s+'= b;'
    print '  return c;'
    print '}'
    print

    # computed assigment
    print tparg
    print 'inline '+typname+' & operator'+s+'= ('+typname+' & a, '+scalar+' b)'
    print '{';
    print '  for (uint i=0; i<a.size(); ++i)';
    print '    a[i] '+s+'= b;'
    print '  return a;'
    print '}'
    print

  # scalar-vector operation
  print tparg
  print 'inline '+typname+' operator'+s+' ('+scalar+' a, const '+typname+' & b)'
  print '{';
  print '  '+typname+' c(b.size());';
  print '  for (uint i=0; i<b.size(); ++i)';
  print '    c[i] = a '+s+' b[i];'
  print '  return c;'
  print '}'
  print

def funloop(s):
  """ unary operator (functions) """
  print tparg
  print 'inline '+typname+' '+s+'(const '+typname+' & a)'
  print '{';
  print '  '+typname+' b(a.size());';
  print '  for (uint i=0; i<a.size(); ++i)'
  print '    b[i] = '+s+'(a[i]);'
  print '  return b;'
  print '}'
  print

def header(s):
  print '// mathematical operators for ',s
  print '// file generated by genua/tools/opsprint.py'
  print

# main program

header(typname)

for op in binops:
  binoploop(op)

for op in mfuns:
  funloop(op)

