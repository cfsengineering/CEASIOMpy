
/* Copyright (C) 2015 David Eller <david@larosterna.com>
 * 
 * Commercial License Usage
 * Licensees holding valid commercial licenses may use this file in accordance
 * with the terms contained in their respective non-exclusive license agreement.
 * For further information contact david@larosterna.com .
 *
 * GNU General Public License Usage
 * Alternatively, this file may be used under the terms of the GNU General
 * Public License version 3.0 as published by the Free Software Foundation and
 * appearing in the file gpl.txt included in the packaging of this file.
 */
 
#ifndef SCOPE_REPORTINGPENTAGROW_H
#define SCOPE_REPORTINGPENTAGROW_H

#include <QObject>
#ifndef Q_MOC_RUN
#include <surf/pentagrow.h>
#endif

class LogReporter : public QObject
{
Q_OBJECT

public:

  /// pass on message to signal
  void log(const std::string &s);

signals:

  /// emit message to display
  void logMessage(const QString &s);
};


/** Signalling around PentaGrow
 *
 * This is a thin wrapper around the hybrid mesh generation class which
 * passes log messages to a signal so that they can be displayed by the UI.
 *
 * \sa PentaGrow, Logger
 */
class ReportingPentaGrow : public PentaGrow
{
public:

  /// create object
  ReportingPentaGrow(const TriMesh & m);

  /// delete reporter
  ~ReportingPentaGrow();

  /// access reporter
  LogReporter *reporter() const {return m_reporter;}

protected:

  /// handle message generated by PentaGrow
  void log(const std::string &s) const;

private:

  /// reporter object
  LogReporter *m_reporter;
};

#endif // REPORTINGPENTAGROW_H
