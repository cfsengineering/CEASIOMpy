#ifndef JRSTRIANGLEWRAPPER_H
#define JRSTRIANGLEWRAPPER_H

#include <genua/defines.h>
#include <genua/point.h>
#include <string>

struct triangulateio;

/** Wrapper around triangle.c

  This is a minimal wrapper to call triangle.c as a library, which requires that
  libsurf is compiled in open-source mode.

  \ingroup meshgen
 */
class JrsTriangleWrapper
{
public:

  /// mark wrapper as undefined
  JrsTriangleWrapper();

  /// deallocate everything
  ~JrsTriangleWrapper();

  /// assign points to input list
  void allocate(const PointList2d &pts,
                const Indices &segments, const Indices &segmark = Indices(),
                const PointList2d &holes = PointList2d());

  /// prepare for a refinement call: allocate input triangles and area constraints
  void allocate(const PointList2d &pts,
                const Indices &segments, const Indices &segmark,
                const PointList2d &holes,
                const Indices &tri, const Vector &area = Vector());

  /// call triangle with option string, return number of triangles in output
  int generate(const std::string &options);

  /// convenience interface for initial mesh generation
  int generate(double minAngle, double maxArea,
               bool splitBoundaries = false,
               int maxSteinerPoints = 100000);

  /// mesh refinement call using area list
  int refine(double minAngle,
             bool splitBoundaries = false,
             int maxSteinerPoints = 100000);

  /// extract mesh generated by triangle
  void extract(PointList2d &pts, Indices &tri,
               Indices &segm, Indices &smark) const;

  /// read input data from file and import into data structure
  // void readBinary(const std::string &fname);

  /// extract mesh and write to simple binary file
  // void writeBinary(const std::string &fname);

private:

  /// free all memory in io struct
  void deallocate(triangulateio *io) const;

  /// free all memory
  void deallocate();

private:

  /// mesh sent to triangle
  triangulateio *m_in = nullptr;

  /// mesh recovered from triangle
  triangulateio *m_out = nullptr;
};

#endif // JRSTRIANGLEWRAPPER_H
