# Configuration file for program 'surfmap' 
#
# Command line usage:
# surfmap configuration_file.txt
#

#
# Common options
#

# The case name is optional. If given, output files will be named with the case
# name as prefix.  
Case = d4f1

# Select interpolation method, options are RBF, a radial basis function 
# interpolation or Projection, meaning projection on shell elements 
Method = Projection

# Optionally, select format for the output. zml means that one compressed XML
# file is written for visualization in scope; bdis means that one surface
# displacement file is written for each mode, for use with the EDGE 
# aeroelastic toolchain. Multiple formats can be given.
OutputFormat = zml, bdis

# File containing the structural mesh and modal displacement data. This can 
# be a zml file written by (e.g.) scope or a NASTRAN .f06 file for a modal 
# solution (SOL 103) which has been generated using the options
# ECHO   = UNSORT
# DISP   = ALL 
# *** This entry is mandatory ***
StructuralMesh = d4f1_nxn8_20modes_rotated.zml

# File containing the aerodynamic mesh. 
# This can be either a zml file written by scope or sumo, or a bmesh file for 
# use with EDGE. If a bmesh file is given, then bdis output is 
# enabled automatically.
# *** This entry is mandatory ***
AeroMesh = v7noe484kt.zml

# A list of names of moving mesh boundaries.
# The boundaries named below are treated as lying on surfaces which should move
# in accordance to structural displacements. Nodes on these boundaries will 
# be displaced. If this list is not provided, then all boundaries marked with 
# wall boundary conditions are selected automatically. Since bmesh files do not
# contain boundary condition specifications, this entry is required for bmesh
# files.
MovingBoundaries = Fuselage, MainWing, Fin, Stabilizer

# A list of sliding boundaries.
# Nodes on these boundaries are restricted to move in the plane defined by the 
# first element of each boundary. Hence, listing a sliding boundary is only 
# useful for boundaries which are entirely plane, making it useful only for
# symmetry planes.
SlidingBoundaries = XZSymmetryPlane

# Eigenmode selection.
# If the displacement mapping is to be performed for a subset of modes only,
# this subset can be defined by specifying a frequency interval and a maximum
# number of eigenmodes to use. If not given, then all eigenmodes present in 
# the structural input will be processed.
MinFrequency = 1.5
MaxFrequency = 85.0
MaxModeCount = 200

# Automatic displacement scaling
# When switched on, surfmap attempts to determine displacement scaling factors
# so that the deformed aerodynamic surface mesh does not contain any degenerate
# (badly rotated, inverted) triangles. Due to the algorithm used in this test,
# only triangular aerodynamic surface elements are considered. Note that the
# factors found in this way are not a guarantee that a volume mesh deformation
# procedure will successfully complete.
# Default is 'false'.
AutomaticScaling = false

#
# Options used for shell projection only
#

# List of shell PIDs to include.
# Elements with these shell property IDs will be used as the set of elements on
# which to project aerodynamic nodes for interpolation. Often, it is more useful
# to specify the opposite, namely PIDs to exclude from the projection set. If 
# this option is not given, then projection on all shell elements in the 
# structural model is permitted. 
# IncludePID  = 

# List of shell PIDs to exclude.
# Elements with any of these property IDs will *not* be used to define the 
# projection surface. This list can be employed to address problems occurring
# when aerodynamic nodes happen to be projected on shell elements which are 
# part of some internal structure or reinforcement. The use of the
# options ExcludePID and IncludePID is mutually exclusive.
ExcludePID = 37 38 39 42 77 78 79 87 88 89 90 12 4 14 91

# Write the projection surface to file.
# Setting this to true will generate a file (for use in scope) which contains
# only the structural shell elements used to define the projection surface. It 
# is a good idea to enable this option when the PID-based selection described 
# above is active, so that the list of active shell elements can be verified.
WriteProjectionSurface = false

# Handling of discontinuities.
# Setting PostSmoothing to *zero* disables any postprocessing of interpolated 
# deformation, which is useful when surface deformations for transpiration 
# boundary conditions are needed. 
#
# A positive number for PostSmoothing enables approximate smoothing by means of
# a number of discrete Jacobi iterations, where the value of PostSmoothing 
# (say 4 to 30) indicates the number of iterations to perform. Note that this
# method is most appropriate if the size of aerodynamic elements in the vicinity
# of discontinuities is approximately equal.
#
# Set PostSmoothing to -1 to replace the iterative smoothing method with the 
# exact solution of a diffusion problem, where the deformations for all elements
# recognised as being near a discontinuity are determined from interpolated 
# deformations in the region around those elements. This approach works well 
# even with significant size differences between aerodynamic elements in the 
# discontinuous displacement region.   
#
PostSmoothing = -1

# Catch radius around discontinuities. 
# First, all aerodynamic elements which stretch across structural component
# boundaries (where structural deformations can be non-smooth) are found. It is,
# however, possible that some of these elements, e.g. at the leading edge, are 
# very small. Smoothing deformations over just these few small elements may 
# therefore still generate undesirable mesh irregularities. Setting the 
# smoothing radius to non-zero values includes all aerodynamic nodes which are
# within this distance from any of the already identified candidate nodes in the
# set of nodes to which the smoothing defined by PostSmoothing is applied.
SmoothingRadius = 0.005

# Topological ring around discontinuities.
# An alternative way of including more aerodynamic elements in the smoothed set
# is to specify a topological neighbourhood. Setting this option to 0 disables,
# 1 means all neighbour elements, 2 neighbours-of-neighbours and so on.
SmoothingRing = 0

#
# Options used for RBF interpolation only
#

# Structural node selection options.
# The following three options allow to specify which structural nodes are to be 
# used to define center points for the radial basis functions. Structural 
# displacements will be interpolated exactly at these center points. The 
# computational work required to define the RBF basis increases very quickly 
# with the number of centers, so that more than a few thousand centers should
# usually be avoided. In particular, the RBF method is not suitable for use
# with detailed shell models with many nodes. The default is to collect only 
# nodes on beam elements.
UsePoints = false
UseBeams = true
UseShells = false

# Center merge tolerance.
# The RBF method can fail for models which contain multiple nodes at the same
# geometric location, which is common in structural models with mechanisms. This
# option can be used to merge closely spaced RBF centers so as to improve the
# robustness of the method. The default value is 1e-12.  
MergeThreshold = 0.001




